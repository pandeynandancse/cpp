A virtual function is a member function which is declared within a base class and is re-defined(Overriden) by a derived class. 
When you refer to a derived class object using a pointer or a reference to the base class, 
you can call a virtual function for that object but execute the derived classâ€™s version of the function.


They are mainly used to achieve Runtime polymorphism
Functions are declared with a virtual keyword in base class.



Virtual functions cannot be static and also cannot be a friend function of another class.


The prototype of virtual functions should be same in base as well as derived class.


They are always defined in base class and overridden in derived class. 
It is not mandatory for derived class to override (or re-define the virtual function), in that case base class version of function is used.


A class may have virtual destructor but it cannot have a virtual constructor.







https://www.geeksforgeeks.org/virtual-function-cpp/


---------------------------------------------------------------------------------
// CPP program to illustrate 
// concept of Virtual Functions 

#include <iostream> 
using namespace std; 

class base { 
public: 
	 void print() 
	{ 
		cout << "print base class" << endl; 
	} 

	void show() 
	{ 
		cout << "show base class" << endl; 
	} 
}; 

class derived : public base { 
public: 
	void print() 
	{ 
		cout << "print derived class" << endl; 
	} 

	void show() 
	{ 
		cout << "show derived class" << endl; 
	} 
}; 

int main() 
{ 
	base * bptr; 
	derived d; 
	bptr = &d; 

	// virtual function, binded at runtime 
	bptr->print(); 

	// Non-virtual function, binded at compile time 
	bptr->show(); 
} 





output:

print base class
show base class




-----------------------------------------------------------------------------



// CPP program to illustrate 
// concept of Virtual Functions 

#include <iostream> 
using namespace std; 

class base { 
public: 
	 void print() 
	{ 
		cout << "print base class" << endl; 
	} 

	void show() 
	{ 
		cout << "show base class" << endl; 
	} 
}; 

class derived : public base { 
public: 
	void print() 
	{ 
		cout << "print derived class" << endl; 
	} 

	void show() 
	{ 
		cout << "show derived class" << endl; 
	} 
}; 

int main() 
{ 
	base bptr; 
	derived d; 
	//bptr = &d; 

	// virtual function, binded at runtime 
	bptr.print(); 
	d.print();
	// Non-virtual function, binded at compile time 
	bptr.show(); 
	d.show();
} 





output:

print base class
print derived class
show base class
show derived class
-----------------------------------------------------------------------------------------



// CPP program to illustrate 
// concept of Virtual Functions 

#include <iostream> 
using namespace std; 

class base { 
public: 
	 virtual void print() 
	{ 
		cout << "print base class" << endl; 
	} 

	void show() 
	{ 
		cout << "show base class" << endl; 
	} 
}; 

class derived : public base { 
public: 
	void print() 
	{ 
		cout << "print derived class" << endl; 
	} 

	void show() 
	{ 
		cout << "show derived class" << endl; 
	} 
}; 

int main() 
{ 
	base *bptr; 
	derived d; 
	bptr = &d; 

	// virtual function, binded at runtime 
	bptr->print(); 
	//d.print();
	// Non-virtual function, binded at compile time 
	bptr->show(); 
	//d.show();
} 





output:
print derived class
show base class




------------------------------------------------------------------------------------------

when derived class has no overriden virtual function





// CPP program to illustrate 
// concept of Virtual Functions 

#include <iostream> 
using namespace std; 

class base { 
public: 
	 virtual void print() 
	{ 
		cout << "print base class" << endl; 
	} 

	void show() 
	{ 
		cout << "show base class" << endl; 
	} 
}; 

class derived : public base { 
public: 
	
	void show() 
	{ 
		cout << "show derived class" << endl; 
	} 
}; 

int main() 
{ 
	base *bptr; 
	derived d; 
	bptr = &d; 

	// virtual function, binded at runtime 
	bptr->print(); 
	//d.print();
	// Non-virtual function, binded at compile time 
	bptr->show(); 
	//d.show();
} 





output:

print base class
show base class
